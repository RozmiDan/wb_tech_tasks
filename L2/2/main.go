package main

import "fmt"

/*
defer выполняется после того, как оператор return вычислит и зафиксирует значения для возврата,
но до того, как управление окончательно покинет функцию и вернётся вызывающей стороне.
Когда отложенная функция использует переменную x, компилятор связывает её с ближайшим объявлением x,
видимым в текущей области видимости (по правилу замыкания)
1) В первом случае с именованным возвращаемым значением x - defer ссылается на ту же переменную,
которая используется для возврата результата. Поэтому, когда отложенная функция изменяет x,
она фактически меняет значение, которое будет возвращено.

2) Во втором случае - оператор return сначала вычисляет выражение x
и копирует его значение в отдельную область памяти — «слот возврата». После этого defer
изменяет локальную переменную x, но копия в «слоте возврата» уже не связана с ней, поэтому изменение не влияет на результат.
*/

func test() (x int) {
	defer func() {
		x++
	}()
	x = 1
	return
}

func anotherTest() int {
	var x int
	defer func() {
		x++
	}()
	x = 1
	return x
}

func main() {
	fmt.Println(test())        // 2
	fmt.Println(anotherTest()) // 1
}
